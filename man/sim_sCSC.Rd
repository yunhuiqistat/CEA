% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sim_sCSC.R
\name{sim_sCSC}
\alias{sim_sCSC}
\title{Simulation function for contrastive spectral clustering (CSC)}
\usage{
sim_sCSC(
  n11,
  n12,
  n21,
  n22,
  m1tilde,
  m2tilde,
  mu1,
  mu2,
  theta1,
  theta2,
  p1,
  p2,
  p3,
  sigma_t = 1,
  sigma_a = 1,
  Sigma_t = NULL,
  Sigma_a = NULL,
  eta,
  repetition = 10
)
}
\arguments{
\item{n11}{number of target samples in interesting cluster 1 and nuisance cluster 1.}

\item{n12}{number of target samples in interesting cluster 1 and nuisance cluster 2.}

\item{n21}{number of target samples in interesting cluster 2 and nuisance cluster 1.}

\item{n22}{number of target samples in interesting cluster 2 and nuisance cluster 2.}

\item{m1tilde}{number of ancillary samples in nuisance cluster 1.}

\item{m2tilde}{number of ancillary samples in nuisance cluster 2.}

\item{mu1}{non-zero values in mu_t1.}

\item{mu2}{non-zero values in mu_t2.}

\item{theta1}{non-zero values in theta_1.}

\item{theta2}{non-zero values in theta_2}

\item{p1}{number of non-zero elements in mu_t1 and mu_t2.}

\item{p2}{number of non-zero elements in theta_1 and theta_2.}

\item{sigma_t}{standard deviation of the uncorrelated errors in target group.}

\item{sigma_a}{standard deviation of the uncorrelated errors in ancillary group.}

\item{Sigma_t}{the error covariance matrix in target group, if is NULL, use standard deviation specified and assume uncorrelation.}

\item{Sigma_a}{the error covariance matrix in ancillary group, if is NULL, use standard deviation specified and assume uncorrelation.}

\item{eta}{if eta is a vector, eta_tuning algorithm will be called to select optimal eta; if a number, eta will be used.}

\item{repetition}{number of replications of the simulation.}

\item{save_plot}{logical, whether save the score plot and loading plot for the first replication.}
}
\value{
A data frame containing the selected optimal eta, the four metrics values.
}
\description{
This function performs simulation to prove the interesting of hidden clusters by using cPCA and eta tuning algorithm.
Same as in the example of Section 2, we consider two target clusters and two nuisance clusters
}
\examples{
# library(CEA)
# library(ggplot2)
# library(tidyverse)
# library(ggsci)
# library(ggh4x)
# set.seed(111)
# mu2_candidates <- c(1, 2)
# p3_candidates <- c(300, 500)
# eta_range <-  seq(0.1, 50, 0.2)
# Sigmat_candidates <- c("Identity", "Toep(0.4)", "Toep(0.5)")
# results <- setNames(data.frame(matrix(ncol = 8, nrow = 0)),
#                     c("ARI_ctst_interesting", "ARI_ctst_nuisance",
#                      "ARI_trt_interesting", "ARI_trt_nuisance","eta",
#                       "mu2", "p1", "Sigmat"))
# for (mu2 in mu2_candidates) {
#   for (p3 in p3_candidates) {
#     for(Sigmat in Sigmat_candidates){
#       p1 <- 5
#       p2 <- 10
#       p <- p1+p2+p3
#       Sigma_t <- case_when(Sigmat == "Identity" ~ diag(1, p),
#                            Sigmat == "Toep(0.4)" ~ toeplitz(0.4^(0:(p-1))),
#                            Sigmat == "Toep(0.5)" ~ toeplitz(0.5^(0:(p-1))))
#       res <- sim_sCSC(n11 = 50, n12 = 25, n21 = 55, n22 = 30, m1tilde = 20, m2tilde = 30,
#                      mu1 = 5, mu2 = mu2, theta1 = -5, theta2 = 6, p1 = p1, p2 = p2, p3 = p3,
#                      sigma_t = 1, sigma_a = 1,
#                      Sigma_t = Sigma_t, Sigma_a = NULL,
#                      eta = eta_range, repetition = 10)
#       res$mu2 <- mu2
#       res$mu <- abs(mu2-5)
#       res$p3 <- p3
#       res$Sigmat <- Sigmat
#       results <- rbind(results, res)
#     }
#   }
# }
# plot_results <- pivot_longer(results, 1:4, names_to = "Type", values_to = "ARI")
# plot_results$Analysis <- sapply(plot_results$Type, function(x){strsplit(x,"_")[[1]][2]})
# plot_results$Cluster <- sapply(plot_results$Type, function(x){strsplit(x,"_")[[1]][3]})
# plot_results$Analysis <- ifelse(plot_results$Analysis=="ctst","Contrastive","Target-only")
# plot_results$Cluster <- ifelse(plot_results$Cluster=="interesting","Interesting","Nuisance")
# plot_results$eta <- paste("eta==", plot_results$eta, sep = "")
# plot_results$mu <- paste("mu==", plot_results$mu, sep = "")
# plot_results$p3 <- paste("p[3]==", plot_results$p1, sep = "")
# plot_results <- plot_results \%>\% group_by(mu, p3, Sigmat, Cluster, Analysis) \%>\%  summarise(Average_ARI = mean(ARI), SE_ARI = sd(ARI))
# print(knitr::kable(plot_results, format = "markdown"))
}
