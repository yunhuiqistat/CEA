% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sim_3CA.R
\name{sim_3CA}
\alias{sim_3CA}
\title{Simulation function for 3CA}
\usage{
sim_3CA(
  nt,
  na,
  p,
  q,
  s,
  AR,
  lambda_t = c(3, 2, 1, 0),
  lambda_a = c(3, 2),
  eta = NULL,
  lm_sigma = 1,
  lm_beta = 1.5,
  repetition = 10
)
}
\arguments{
\item{nt}{sample size of target group.}

\item{na}{sample size of ancillary group.}

\item{p}{dimension of one data type denote as X.}

\item{q}{dimension of another data type denote as Y.}

\item{s}{number of non-zero loadings in each singular vector.}

\item{lambda_t}{eigenvalues for U1V1, U2V2, U3V3 and U4V4 in target group.}

\item{lambda_a}{eigenvalues for U1V1, U2V2 in ancillary group.}

\item{eta}{the tuning parameter between target and ancillary group, if eta = NULL, will use eta estimation.}

\item{lm_sigma}{the error standard deviation of regression which is used for validation of methods.}

\item{lm_beta}{the coefficient of regression which is used for validation of methods.}

\item{repetition}{the number of replications for simulation.}

\item{AR:}{values of the first off-diagonal element for toeplitz matrices which are set to be the error covariance matrix for Xt and Yt. The error covariances for Xa and Ya are set to be identity matrices.}
}
\value{
A data frame containing the estimation of regression coefficients from 3CA, target cross covariance analysis, and cPCA on one data type.
}
\description{
This function performs simulation to prove the use of 3CA in estimating the target latent factor. The data will be generated by simulating their covariance matrix.
}
\examples{
library(CEA)
library(ggsci)
library(ggplot2)
library(tidyverse)
n_candidates <- c(1000, 2000, 3000)
AR_candidates <- c(0.5, 0.7, 0.9)
results <- setNames(data.frame(matrix(ncol = 6, nrow = 0)),
                    c("est_trt_cca", "est_ctst_cca", "est_ctst_pca", "eta_est",
                      "SampleSize", "AR"))
for (n in n_candidates) {
  for (AR in AR_candidates){
    res <- sim_3CA(nt = n, na = n, p = 40, q = 40, s = 10, AR = AR,
                    lambda_t = c(6, 4, 2, 0), lambda_a = c(2, 0.2), eta = NULL,
                    lm_sigma = 1, lm_beta = 1.5, repetition = 10)
   rownames(res) <- NULL
   res$SampleSize <- n
   res$AR <- AR
   results <- rbind(results, res)
 }
}
knitr::kable(results, format = "markdown")
plot_results <- pivot_longer(results, 1:3, names_to = "Type", values_to = "Estimation")
plot_results$Analysis <- sub(".*?_", "", plot_results$Type)
plot_results$SampleSize <- paste("n=", plot_results$SampleSize, sep = "")
plot_results$AR <- paste("AR=", plot_results$AR, sep = "")
plot_results$Analysis <- factor(plot_results$Analysis, labels = c("ContrastiveCCA", "ContrastivePCA", "TargetCCA"))
p_est_box <- ggplot(data = plot_results)+
     geom_boxplot(aes(x = factor(Analysis, levels=c("ContrastiveCCA", "ContrastivePCA", "TargetCCA"), labels=c("3CA", "cPCA", "trtCCA")), y = abs(Estimation), fill = Analysis), show.legend = FALSE)+
     facet_grid(cols = vars(SampleSize), rows = vars(AR))+
     geom_hline(yintercept = 1.5, linetype = "dashed", color="red")+
     scale_y_continuous(breaks = c( 0, 1.5))+
     theme_bw()+
     theme(
       panel.grid = element_blank(),
       strip.background = element_rect(fill = "lightblue", color = "black"),
       strip.text = element_text(color = "black", face = "bold", size = 14),
       text = element_text(size = 14),  # Adjust text size
       axis.title = element_text(size = 16),  # Adjust axis title size
       axis.text = element_text(size = 12),   # Adjust axis text size
     )+
     scale_fill_d3()+
     labs(y = "Estimation of the coefficient in (3.1)",x="Analysis")
print(p_est_box)
}
